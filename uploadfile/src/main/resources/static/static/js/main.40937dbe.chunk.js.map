{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Title","Typography","FORM_LAYOUT","labelCol","span","FORM_BTN_LAYOUT","wrapperCol","offset","uploadFile","values","data","FormData","append","imageFile","file","originFileObj","axios","post","headers","then","response","message","success","catch","error","hooksRequest","argl","agr2","document","getElementById","innerHTML","name","App","className","align","justify","level","style","fontWeight","onFinish","Item","customRequest","showUploadList","icon","UploadOutlined","id","type","htmlType","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yUAUQA,EAAUC,IAAVD,MAGFE,EAAc,CAClBC,SAAU,CACRC,KAAM,IAIJC,EAAkB,CACtBC,WAAY,CACVF,KAAM,EACNG,OAAQ,IAINC,EAAa,SAACC,GAClB,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQH,EAAOI,UAAUC,KAAKC,eAC1CC,IAAMC,KAlBI,+BAkBMP,EAAM,CACpBQ,QAAS,CACP,eAAgB,yBAEjBC,MAAK,SAAAC,GACNC,IAAQC,QAAQF,EAASV,KAAKW,YAC7BE,OAAM,SAAAC,GACPH,IAAQG,MAAMA,OAIZC,EAAe,SAACC,EAAMC,GAC1BC,SAASC,eAAe,aAAaC,UAAYJ,EAAKZ,KAAKiB,MA0B9CC,MAvBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,CAAKC,MAAM,SAASC,QAAQ,SAA5B,SACE,eAAC,IAAD,CAAK/B,KAAM,EAAX,UACA,cAACJ,EAAD,CAAOoC,MAAO,EAAGC,MAAO,CAAEC,WAAY,OAAtC,+BACA,eAAC,IAAD,yBAAMP,KAAK,oBAAuB7B,GAAlC,IAA+CqC,SAAU/B,EAAzD,UACE,cAAC,IAAKgC,KAAN,CAAcT,KAAK,YAAnB,SACE,eAAC,IAAD,CAAQU,cAAehB,EAAciB,gBAAgB,EAArD,UACE,cAAC,IAAD,CAAQC,KAAM,cAACC,EAAA,EAAD,IAAd,6BACA,qBAAKC,GAAG,mBAGZ,cAAC,IAAKL,KAAN,2BAAenC,GAAf,aACE,cAAC,IAAD,CAAQyC,KAAK,UAAUC,SAAS,SAAhC,wCC9CGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,SAM1BmB,M","file":"static/js/main.40937dbe.chunk.js","sourcesContent":["import './App.css';\n\n// 1st method\nimport { Button, Upload, Spin, message, Form, Row, Col, Typography } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport Layout, { Content } from 'antd/lib/layout/layout';\nimport React, { useState } from 'react';\n\nimport axios from 'axios';\n\nconst { Title } = Typography;\nconst URL = 'http://localhost:8080/upload';\n\nconst FORM_LAYOUT = {\n  labelCol: {\n    span: 8,\n  }\n}\n\nconst FORM_BTN_LAYOUT = {\n  wrapperCol: {\n    span: 8,\n    offset: 8\n  }\n}\n\nconst uploadFile = (values) => {\n  const data = new FormData();\n  data.append('file', values.imageFile.file.originFileObj);\n  axios.post(URL, data, {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\",\n    }\n  }).then(response => {\n    message.success(response.data.message);\n  }).catch(error => {\n    message.error(error);\n  });\n}\n\nconst hooksRequest = (argl, agr2) => {\n  document.getElementById('file-name').innerHTML = argl.file.name;\n}\n\nfunction App() {\n  return(\n    <div className=\"App\">\n      <Row align=\"middle\" justify=\"center\">\n        <Col span={6}>\n        <Title level={2} style={{ fontWeight: \"300\" }}>File Upload-Antd </Title>\n        <Form name=\"file-upload-form\" {...FORM_LAYOUT} onFinish={uploadFile}>\n          <Form.Item    name=\"imageFile\">\n            <Upload customRequest={hooksRequest} showUploadList={false}>\n              <Button icon={<UploadOutlined />}>Click to Upload</Button>\n              <div id=\"file-name\"></div>\n            </Upload>\n          </Form.Item>\n          <Form.Item {...FORM_BTN_LAYOUT}>\n            <Button type=\"primary\" htmlType=\"submit\">Upload file</Button>\n          </Form.Item>\n        </Form>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n\n// class App extends React.Component {\n//   state = {\n//     file: '',\n//     uploading: false,\n//   };\n\n//   handleUpload = () => {\n//     const { file } = this.state;\n//     const formData = new FormData();\n//     file = \n//     fileList.forEach(file => {\n//       formData.append('file', file);\n//     });\n\n//     this.setState({\n//       uploading: true,\n//     });\n\n//     // You can use any AJAX library you like\n//     reqwest({\n//       url: 'http://localhost:8080/upload',\n//       method: 'post',\n//       processData: false,\n//       data: formData,\n//       success: () => {\n//         this.setState({\n//           fileList: [],\n//           uploading: false,\n//         });\n//         message.success('upload successfully.');\n//       },\n//       error: () => {\n//         this.setState({\n//           uploading: false,\n//         });\n//         message.error('upload failed.');\n//       },\n//     });\n//   };\n\n//   render() {\n//     const { uploading, fileList } = this.state;\n//     const props = {\n//       onRemove: file => {\n//         this.setState(state => {\n//           const index = state.fileList.indexOf(file);\n//           const newFileList = state.fileList.slice();\n//           newFileList.splice(index, 1);\n//           return {\n//             fileList: newFileList,\n//           };\n//         });\n//       },\n//       beforeUpload: file => {\n//         this.setState(state => ({\n//           fileList: [...state.fileList, file],\n//         }));\n//         return false;\n//       },\n//       fileList,\n//     };\n\n//     return (\n//       <>\n//         <Upload {...props}>\n//           <Button icon={<UploadOutlined />}>Select File</Button>\n//         </Upload>\n//         <Button\n//           type=\"primary\"\n//           onClick={this.handleUpload}\n//           disabled={fileList.length === 0}\n//           loading={uploading}\n//           style={{ marginTop: 16 }}\n//         >\n//           {uploading ? 'Uploading' : 'Start Upload'}\n//         </Button>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n\n// function App() {\n\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   const beforeUpload = (file) => {\n//     const isCsv = file.type === 'text/csv' || file.type === 'text/comma-separated-values' || file.type === 'application/csv';\n//     if (!isCsv) {\n//       message.error('Upload Error: You can only upload CSV file!');\n//     }\n//     const isLt2M = file.size / 1024 / 1024 < 10;\n//     if (!isLt2M) {\n//       message.error('Upload Error: File must be smaller than 10MB!');\n//     }\n//     return isCsv && isLt2M;\n//   }\n\n\n//   const onChangeDocumentUpload = (info) => {\n//     if (info.file.status === 'uploading') {\n//       setIsLoading(true);\n//       return;\n//     }\n//     if (info.file.status === 'done') {\n//       message.success(`${info.file.name} file uploaded successfully`);\n//       setIsLoading(false);\n//     } else if (info.file.status === 'error') {\n//       message.error(`${info.file.name} file upload failed.`);\n//       setIsLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//     <Layout>\n//       {/* <Header>CSV File Upload</Header> */}\n      \n//       <header id=\"header\">\n//         <div>\n//         <a href=\"#dashboard\">\n//         <div className=\"logo\">\n//         <img src=\"https://ui.harmony.epsilon.com/reporting/assets/img/messaging-dark.svg\" alt=\"logo\"/>\n//         </div>\n//         </a>\n//         </div>\n//       </header>\n//       <Spin spinning={isLoading}>\n//       <Layout>\n//         <Content>\n//           <div className=\"topic\">File Upload Utility</div>\n//             {/* <div className=\"upload-container\"> */}\n//                 <Upload\n//                   action={`http://localhost:8080/upload`}\n//                   name= 'file'\n//                   listType=\"picture\"\n//                   maxCount={1}\n//                   multiple={false}\n//                   onChange={onChangeDocumentUpload}\n//                   beforeUpload={beforeUpload}\n//                   >\n//                   <Button icon={<UploadOutlined />}>Upload CSV</Button>\n//                 </Upload>\n//               {/* </div> */}\n//             </Content>\n//           </Layout>\n//         </Spin>\n//       </Layout>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// 2nd method\n// import { Upload, message, Button } from 'antd';\n// import { UploadOutlined } from '@ant-design/icons';\n// function App() {\n//   const props = {\n//     name: 'file',\n//     action: 'http://localhost:5000/upload',\n//     // headers: {\n//     //   authorization: 'authorization-text',\n//     // },\n//     onChange(info) {\n//       if (info.file.status !== 'uploading') {\n//         console.log(info.file, info.fileList);\n//       }\n//       if (info.file.status === 'done') {\n//         message.success(`${info.file.name} file uploaded successfully`);\n//       } else if (info.file.status === 'error') {\n//         message.error(`${info.file.name} file upload failed.`);\n//       }\n//     },\n//     progress: {\n//       strokeColor: {\n//         '0%': '#108ee9',\n//         '100%': '#87d068',\n//       },\n//       strokeWidth: 3,\n//       format: percent => `${parseFloat(percent.toFixed(2))}%`,\n//     },\n//   };\n//   return(\n//     <Upload {...props}>\n//       <Button icon={<UploadOutlined />}>Click to Upload</Button>\n//     </Upload>\n//   );\n\n// }\n// export default App;\n\n\n\n// 3rd method\n// import React from 'react';\n// import { Upload, message } from 'antd';\n// import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n\n// function getBase64(img, callback) {\n//   const reader = new FileReader();\n//   reader.addEventListener('load', () => callback(reader.result));\n//   reader.readAsDataURL(img);\n// }\n\n// function beforeUpload(file) {\n//   const isCsv = file.type === 'text/csv' || file.type === 'text/comma-separated-values' || file.type === 'application/csv';\n//   if (!isCsv) {\n//     message.error('Upload Error: You can only upload CSV file!');\n//   }\n//   const isLt2M = file.size / 1024 / 1024 < 10;\n//   if (!isLt2M) {\n//     message.error('Upload Error: File must be smaller than 10MB!');\n//   }\n//   return isCsv && isLt2M;\n// }\n\n// class App extends React.Component {\n//   state = {\n//     loading: false,\n//   };\n\n//   handleChange = info => {\n//     if (info.file.status === 'uploading') {\n//       this.setState({ loading: true });\n//       return;\n//     }\n//     if (info.file.status === 'done') {\n//       // Get this url from response in real world.\n//       getBase64(info.file.originFileObj, imageUrl =>\n//         this.setState({\n//           imageUrl,\n//           loading: false,\n//         }),\n//       );\n//     }\n//   };\n\n//   render() {\n//     const { loading, imageUrl } = this.state;\n//     const uploadButton = (\n//       <div>\n//         {loading ? <LoadingOutlined /> : <PlusOutlined />}\n//         <div style={{ marginTop: 0 }}>Upload CSV</div>\n//       </div>\n//     );\n//     return (\n//       <Upload\n//         name=\"file\"\n//         listType=\"picture-card\"\n//         // className=\"avatar-uploader\"\n//         showUploadList={false}\n//         action=\"http://localhost:5000/upload\"\n//         beforeUpload={beforeUpload}\n//         onChange={this.handleChange}\n//       >\n//         {imageUrl ? <img src={imageUrl}  style={{ width: '100%' }} /> : uploadButton}\n//       </Upload>\n//     );\n//   }\n// }\n\n// export default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}