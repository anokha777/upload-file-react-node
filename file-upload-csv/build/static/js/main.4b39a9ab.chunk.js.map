{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","isLoading","setIsLoading","className","spinning","action","name","listType","maxCount","multiple","onChange","info","file","status","message","success","error","beforeUpload","isCsv","type","isLt2M","size","icon","UploadOutlined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAiEeA,MAzDf,WAEE,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KA6BA,OACE,qBAAKC,UAAU,MAAf,SACA,eAAC,IAAD,WACE,cAAC,SAAD,8BACA,cAAC,IAAD,CAAMC,SAAUH,EAAhB,SACA,cAAC,IAAD,UACE,cAAC,UAAD,UACM,cAAC,IAAD,CACEI,OAAM,+BACNC,KAAM,OACNC,SAAS,UACTC,SAAU,EACVC,UAAU,EACVC,SA3BiB,SAACC,GACL,cAArBA,EAAKC,KAAKC,OAIW,SAArBF,EAAKC,KAAKC,QACZC,IAAQC,QAAR,UAAmBJ,EAAKC,KAAKN,KAA7B,gCACAJ,GAAa,IACiB,UAArBS,EAAKC,KAAKC,SACnBC,IAAQE,MAAR,UAAiBL,EAAKC,KAAKN,KAA3B,yBACAJ,GAAa,IARbA,GAAa,IA0BHe,aAzCO,SAACL,GACpB,IAAMM,EAAsB,aAAdN,EAAKO,MAAqC,gCAAdP,EAAKO,MAAwD,oBAAdP,EAAKO,KACzFD,GACHJ,IAAQE,MAAM,+CAEhB,IAAMI,EAASR,EAAKS,KAAO,KAAO,KAAO,GAIzC,OAHKD,GACHN,IAAQE,MAAM,iDAETE,GAASE,GAyBN,SASE,cAAC,IAAD,CAAQE,KAAM,cAACC,EAAA,EAAD,IAAd,sCC3CDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4b39a9ab.chunk.js","sourcesContent":["import './App.css';\n\n// 1st method\nimport { Button, Upload, Spin, message } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport Layout, { Content, Header } from 'antd/lib/layout/layout';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const beforeUpload = (file) => {\n    const isCsv = file.type === 'text/csv' || file.type === 'text/comma-separated-values' || file.type === 'application/csv';\n    if (!isCsv) {\n      message.error('Upload Error: You can only upload CSV file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 10;\n    if (!isLt2M) {\n      message.error('Upload Error: File must be smaller than 10MB!');\n    }\n    return isCsv && isLt2M;\n  }\n\n\n  const onChangeDocumentUpload = (info) => {\n    if (info.file.status === 'uploading') {\n      setIsLoading(true);\n      return;\n    }\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n      setIsLoading(false);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n    <Layout>\n      <Header>CSV File Upload</Header>\n      <Spin spinning={isLoading}>\n      <Layout>\n        <Content>\n              <Upload\n                action={`http://localhost:5000/upload`}\n                name= 'file'\n                listType=\"picture\"\n                maxCount={1}\n                multiple={false}\n                onChange={onChangeDocumentUpload}\n                beforeUpload={beforeUpload}\n                >\n                <Button icon={<UploadOutlined />}>Upload CSV</Button>\n              </Upload>\n            </Content>\n          </Layout>\n        </Spin>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n\n// 2nd method\n// import { Upload, message, Button } from 'antd';\n// import { UploadOutlined } from '@ant-design/icons';\n// function App() {\n//   const props = {\n//     name: 'file',\n//     action: 'http://localhost:5000/upload',\n//     // headers: {\n//     //   authorization: 'authorization-text',\n//     // },\n//     onChange(info) {\n//       if (info.file.status !== 'uploading') {\n//         console.log(info.file, info.fileList);\n//       }\n//       if (info.file.status === 'done') {\n//         message.success(`${info.file.name} file uploaded successfully`);\n//       } else if (info.file.status === 'error') {\n//         message.error(`${info.file.name} file upload failed.`);\n//       }\n//     },\n//     progress: {\n//       strokeColor: {\n//         '0%': '#108ee9',\n//         '100%': '#87d068',\n//       },\n//       strokeWidth: 3,\n//       format: percent => `${parseFloat(percent.toFixed(2))}%`,\n//     },\n//   };\n//   return(\n//     <Upload {...props}>\n//       <Button icon={<UploadOutlined />}>Click to Upload</Button>\n//     </Upload>\n//   );\n\n// }\n// export default App;\n\n\n\n// 3rd method\n// import React from 'react';\n// import { Upload, message } from 'antd';\n// import { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n\n// function getBase64(img, callback) {\n//   const reader = new FileReader();\n//   reader.addEventListener('load', () => callback(reader.result));\n//   reader.readAsDataURL(img);\n// }\n\n// function beforeUpload(file) {\n//   const isCsv = file.type === 'text/csv' || file.type === 'text/comma-separated-values' || file.type === 'application/csv';\n//   if (!isCsv) {\n//     message.error('Upload Error: You can only upload CSV file!');\n//   }\n//   const isLt2M = file.size / 1024 / 1024 < 10;\n//   if (!isLt2M) {\n//     message.error('Upload Error: File must be smaller than 10MB!');\n//   }\n//   return isCsv && isLt2M;\n// }\n\n// class App extends React.Component {\n//   state = {\n//     loading: false,\n//   };\n\n//   handleChange = info => {\n//     if (info.file.status === 'uploading') {\n//       this.setState({ loading: true });\n//       return;\n//     }\n//     if (info.file.status === 'done') {\n//       // Get this url from response in real world.\n//       getBase64(info.file.originFileObj, imageUrl =>\n//         this.setState({\n//           imageUrl,\n//           loading: false,\n//         }),\n//       );\n//     }\n//   };\n\n//   render() {\n//     const { loading, imageUrl } = this.state;\n//     const uploadButton = (\n//       <div>\n//         {loading ? <LoadingOutlined /> : <PlusOutlined />}\n//         <div style={{ marginTop: 0 }}>Upload CSV</div>\n//       </div>\n//     );\n//     return (\n//       <Upload\n//         name=\"file\"\n//         listType=\"picture-card\"\n//         // className=\"avatar-uploader\"\n//         showUploadList={false}\n//         action=\"http://localhost:5000/upload\"\n//         beforeUpload={beforeUpload}\n//         onChange={this.handleChange}\n//       >\n//         {imageUrl ? <img src={imageUrl}  style={{ width: '100%' }} /> : uploadButton}\n//       </Upload>\n//     );\n//   }\n// }\n\n// export default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}